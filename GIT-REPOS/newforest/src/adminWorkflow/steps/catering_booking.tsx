import React, { useState } from 'react';
import { 
  Mail, 
  ChefHat, 
  Calendar, 
  Users, 
  CheckCircle, 
  Clock, 
  AlertCircle, 
  Play, 
  Settings,
  FileText,
  Send
} from 'lucide-react';

interface CateringBookingProps {
  isActive: boolean;
  onComplete: () => void;
  demoMode: boolean;
  onDemoModeChange: (enabled: boolean) => void;
}

interface CateringData {
  groupName: string;
  eventDate: string;
  numberOfPeople: number;
  eventType: string;
  specialRequirements?: string;
  contactEmail: string;
  contactName: string;
}

const CateringBooking: React.FC<CateringBookingProps> = ({ 
  isActive, 
  onComplete, 
  demoMode, 
  onDemoModeChange 
}) => {
  const [activities, setActivities] = useState<Array<{
    id: string;
    type: 'info' | 'success' | 'error' | 'warning';
    message: string;
    timestamp: Date;
    phase: 'Email' | 'Template' | 'System';
  }>>([]);

  const [isProcessing, setIsProcessing] = useState(false);
  const [emailStatus, setEmailStatus] = useState<'pending' | 'composing' | 'sending' | 'sent'>('pending');
  const [templateStatus, setTemplateStatus] = useState<'pending' | 'loading' | 'attached'>('pending');

  // Demo catering data from previous steps
  const demoCateringData: CateringData = {
    groupName: "TechCorp Solutions Team Building Event",
    eventDate: "2024-07-15",
    numberOfPeople: 25,
    eventType: "Team Building - Outdoor Challenges",
    specialRequirements: "2 vegetarian meals, 1 gluten-free meal",
    contactEmail: "sarah.johnson@techcorp.com",
    contactName: "Sarah Johnson"
  };

  const addActivity = (type: 'info' | 'success' | 'error' | 'warning', message: string, phase: 'Email' | 'Template' | 'System') => {
    const newActivity = {
      id: Date.now().toString(),
      type,
      message,
      timestamp: new Date(),
      phase
    };
    setActivities(prev => [...prev, newActivity]);
  };

  const generateCateringEmail = (data: CateringData) => {
    return {
      to: "enquiries@novaforestkitchen.co.uk",
      subject: `Catering Booking Request - ${data.groupName}`,
      body: `Dear Nova Forest Kitchen Team,

I hope this email finds you well. We would like to book catering services for an upcoming corporate event.

EVENT DETAILS:
• Group Name: ${data.groupName}
• Event Date: ${new Date(data.eventDate).toLocaleDateString('en-GB', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}
• Number of People: ${data.numberOfPeople}
• Event Type: ${data.eventType}

CONTACT INFORMATION:
• Primary Contact: ${data.contactName}
• Email: ${data.contactEmail}

${data.specialRequirements ? `SPECIAL REQUIREMENTS:
${data.specialRequirements}

` : ''}Please find attached the Nova Catering Order Form template for your reference. Could you please confirm availability for this date and provide a quote?

We look forward to working with you on this event.

Best regards,
New Forest Activities Team

---
This email was automatically generated by our booking system.`
    };
  };

  const processCateringBooking = async () => {
    setIsProcessing(true);
    setActivities([]);
    
    try {
      addActivity('info', 'Starting catering booking automation', 'System');
      
      // Step 1: Load catering order form template
      setTemplateStatus('loading');
      addActivity('info', 'Loading Nova Catering Order Form template', 'Template');
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      if (demoMode) {
        setTemplateStatus('attached');
        addActivity('success', 'Demo: Template NOVA CATERING ORDER FORM TEMPLATE.docx loaded', 'Template');
      } else {
        // Real implementation would load actual template file
        setTemplateStatus('attached');
        addActivity('success', 'Catering order form template attached', 'Template');
      }
      
      // Step 2: Compose email
      setEmailStatus('composing');
      addActivity('info', 'Composing catering booking email', 'Email');
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const emailContent = generateCateringEmail(demoCateringData);
      addActivity('info', `Email composed for ${emailContent.to}`, 'Email');
      addActivity('info', `Subject: ${emailContent.subject}`, 'Email');
      
      // Step 3: Send email
      setEmailStatus('sending');
      addActivity('info', 'Sending catering booking email', 'Email');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      if (demoMode) {
        setEmailStatus('sent');
        addActivity('success', 'Demo: Email sent to Nova Forest Kitchen', 'Email');
        addActivity('info', 'Demo: Catering booking request submitted successfully', 'Email');
      } else {
        // Real implementation would send actual email
        setEmailStatus('sent');
        addActivity('success', 'Catering booking email sent successfully', 'Email');
        addActivity('info', 'Nova Forest Kitchen will respond with availability and quote', 'Email');
      }
      
      addActivity('success', 'Catering booking automation completed', 'System');
      onComplete();
      
    } catch (error) {
      addActivity('error', `Catering booking failed: ${error}`, 'System');
    } finally {
      setIsProcessing(false);
    }
  };

  const getPhaseIcon = (phase: string) => {
    switch (phase) {
      case 'Email': return <Mail className="w-4 h-4" />;
      case 'Template': return <FileText className="w-4 h-4" />;
      case 'System': return <Settings className="w-4 h-4" />;
      default: return <Settings className="w-4 h-4" />;
    }
  };

  const getPhaseColor = (phase: string) => {
    switch (phase) {
      case 'Email': return 'bg-blue-100 text-blue-800';
      case 'Template': return 'bg-green-100 text-green-800';
      case 'System': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className={`border rounded-lg p-6 ${isActive ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}>
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`p-2 rounded-lg ${isActive ? 'bg-blue-500' : 'bg-gray-400'}`}>
            <ChefHat className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-lg font-semibold">Catering Booking</h3>
            <p className="text-sm text-gray-600">Email Nova Forest Kitchen with booking details</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">Demo Mode</span>
            <button
              onClick={() => onDemoModeChange(!demoMode)}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                demoMode ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span
                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                  demoMode ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
          </div>
          
          <button
            onClick={processCateringBooking}
            disabled={isProcessing}
            className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50"
          >
            {isProcessing ? (
              <Clock className="w-4 h-4 animate-spin" />
            ) : (
              <Play className="w-4 h-4" />
            )}
            <span>{isProcessing ? 'Processing...' : 'Book Catering'}</span>
          </button>
        </div>
      </div>

      {/* Process Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg border">
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg ${
              templateStatus === 'attached' ? 'bg-green-500' : 
              templateStatus === 'loading' ? 'bg-yellow-500' : 'bg-gray-300'
            }`}>
              <FileText className="w-4 h-4 text-white" />
            </div>
            <div>
              <h4 className="font-medium">Template Loading</h4>
              <p className="text-sm text-gray-600">
                {templateStatus === 'pending' && 'Ready to load template'}
                {templateStatus === 'loading' && 'Loading order form...'}
                {templateStatus === 'attached' && 'Template attached'}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg border">
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg ${
              emailStatus === 'sent' ? 'bg-green-500' : 
              emailStatus === 'composing' || emailStatus === 'sending' ? 'bg-yellow-500' : 'bg-gray-300'
            }`}>
              <Mail className="w-4 h-4 text-white" />
            </div>
            <div>
              <h4 className="font-medium">Email Composition</h4>
              <p className="text-sm text-gray-600">
                {emailStatus === 'pending' && 'Waiting for template'}
                {emailStatus === 'composing' && 'Composing email...'}
                {emailStatus === 'sending' && 'Sending email...'}
                {emailStatus === 'sent' && 'Email sent'}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg border">
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg ${
              emailStatus === 'sent' ? 'bg-green-500' : 'bg-gray-300'
            }`}>
              <Send className="w-4 h-4 text-white" />
            </div>
            <div>
              <h4 className="font-medium">Booking Request</h4>
              <p className="text-sm text-gray-600">
                {emailStatus === 'sent' ? 'Booking submitted' : 'Pending email send'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Booking Details */}
      <div className="bg-white p-4 rounded-lg border mb-6">
        <h4 className="font-medium mb-3">Booking Details</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <h5 className="font-medium text-gray-700 mb-2">Event Information</h5>
            <ul className="space-y-1 text-gray-600">
              <li>• Group: {demoCateringData.groupName}</li>
              <li>• Date: {new Date(demoCateringData.eventDate).toLocaleDateString('en-GB')}</li>
              <li>• People: {demoCateringData.numberOfPeople}</li>
              <li>• Type: {demoCateringData.eventType}</li>
            </ul>
          </div>
          <div>
            <h5 className="font-medium text-gray-700 mb-2">Contact & Requirements</h5>
            <ul className="space-y-1 text-gray-600">
              <li>• Contact: {demoCateringData.contactName}</li>
              <li>• Email: {demoCateringData.contactEmail}</li>
              <li>• Catering Email: enquiries@novaforestkitchen.co.uk</li>
              <li>• Special: {demoCateringData.specialRequirements}</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Live Activity Feed */}
      {activities.length > 0 && (
        <div className="bg-white p-4 rounded-lg border">
          <h4 className="font-medium mb-3">Live Activity</h4>
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {activities.map((activity) => (
              <div key={activity.id} className="flex items-start space-x-3 text-sm">
                <div className={`px-2 py-1 rounded-full text-xs font-medium ${getPhaseColor(activity.phase)}`}>
                  <div className="flex items-center space-x-1">
                    {getPhaseIcon(activity.phase)}
                    <span>{activity.phase}</span>
                  </div>
                </div>
                
                <div className="flex-1">
                  <div className="flex items-center space-x-2">
                    {activity.type === 'success' && <CheckCircle className="w-4 h-4 text-green-500" />}
                    {activity.type === 'error' && <AlertCircle className="w-4 h-4 text-red-500" />}
                    {activity.type === 'warning' && <AlertCircle className="w-4 h-4 text-yellow-500" />}
                    {activity.type === 'info' && <Clock className="w-4 h-4 text-blue-500" />}
                    
                    <span className={`${
                      activity.type === 'success' ? 'text-green-700' :
                      activity.type === 'error' ? 'text-red-700' :
                      activity.type === 'warning' ? 'text-yellow-700' :
                      'text-gray-700'
                    }`}>
                      {activity.message}
                    </span>
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    {activity.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Success Rate */}
      <div className="mt-4 text-center">
        <div className="inline-flex items-center space-x-2 bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
          <CheckCircle className="w-4 h-4" />
          <span>99.1% Success Rate</span>
        </div>
      </div>
    </div>
  );
};

export default CateringBooking; 